type Aminal @entity {
  id: Bytes!
  aminalId: BigInt! # uint256
  mom: BigInt! # uint256
  dad: BigInt! # uint256
  tokenUri: String! # string
  energy: BigInt! # uint256
  totalLove: BigInt! # uint256
  breeding: Boolean!
  breedableWith: [BreedAminalEvent]! @derivedFrom(field: "aminalOne")

  # Derived from FeedAminal events
  lovers: [Relationship]! @derivedFrom(field: "aminal")

  # Visual Traits
  backId: BigInt! # uint256
  armId: BigInt! # uint256
  tailId: BigInt! # uint256
  earsId: BigInt! # uint256
  bodyId: BigInt! # uint256
  faceId: BigInt! # uint256
  mouthId: BigInt! # uint256
  miscId: BigInt! # uint256
  # Creation info
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  skills: [Skill]! @derivedFrom(field: "aminal")
}

type User @entity {
  id: Bytes!
  address: Bytes! # address
  lovers: [Relationship]! @derivedFrom(field: "user")
  proposedVisuals: [VisualProposal]! @derivedFrom(field: "proposer")
  traitsCreated: [Trait]! @derivedFrom(field: "creator")
}

type Relationship @entity {
  id: Bytes!
  user: User!
  aminal: Aminal!
  love: BigInt!
}

type BreedAminalEvent @entity(immutable: true) {
  id: Bytes!
  aminalOne: Aminal! # uint256
  aminalTwo: Aminal! # uint256
  auctionId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeedAminalEvent @entity {
  id: Bytes!
  aminal: Aminal! # uint256
  sender: User! # address
  amount: BigInt! # uint256
  love: BigInt! # uint256
  totalLove: BigInt! # uint256
  energy: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Skill @entity {
  id: Bytes!
  aminal: Aminal! # uint256
  skillAddress: Bytes! # address
  removed: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SkillProposal @entity {
  id: Bytes!
  aminalId: BigInt! # uint256
  proposalId: BigInt! # uint256
  skillName: String! # string
  skillAddress: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  removed: Boolean!
}

type SkillVote @entity(immutable: true) {
  id: Bytes!
  aminalId: BigInt! # uint256
  sender: Bytes! # address
  proposalId: BigInt! # uint256
  yesNo: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Squeak @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  aminalId: BigInt! # uint256
  amount: BigInt! # uint256
  energy: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Auction @entity {
  id: Bytes!
  auctionId: BigInt! # uint256
  aminalOne: Aminal!
  aminalTwo: Aminal!
  childAminalId: BigInt! # uint256
  totalLove: BigInt! # uint256
  finished: Boolean!
  visuals: [VisualProposal!]! @derivedFrom(field: "auction")

  # End data
  winningIds: [BigInt!] # uint256[8]
  # Start data
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Trait @entity {
  id: Bytes!
  visualId: BigInt! # uint256
  creator: User
  catEnum: Int! # uint8
  svg: String!
}

type VisualProposal @entity {
  id: Bytes!
  auction: Auction!
  visual: Trait!
  # There won't proposer sometimes if one of the traits
  # inherited from the parent
  proposer: User # address
  loveVote: BigInt! # uint256
  removeVote: BigInt! # uint256
  removed: Boolean!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VisualsVoteEvent @entity(immutable: true) {
  id: Bytes!
  auctionId: BigInt! # uint256
  visualId: BigInt! # uint256
  sender: Bytes! # address
  catEnum: Int! # uint8
  remove: Boolean!
  userLoveVote: BigInt! # uint256
  totalLove: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
